// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/deployment_node.proto

package proto_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeploymentNode_HealthCheck_FullMethodName = "/DeploymentNode/HealthCheck"
	DeploymentNode_DeployApp_FullMethodName   = "/DeploymentNode/DeployApp"
)

// DeploymentNodeClient is the client API for DeploymentNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentNodeClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	DeployApp(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*DeployAppResponse, error)
}

type deploymentNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentNodeClient(cc grpc.ClientConnInterface) DeploymentNodeClient {
	return &deploymentNodeClient{cc}
}

func (c *deploymentNodeClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DeploymentNode_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentNodeClient) DeployApp(ctx context.Context, in *DeployAppRequest, opts ...grpc.CallOption) (*DeployAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployAppResponse)
	err := c.cc.Invoke(ctx, DeploymentNode_DeployApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentNodeServer is the server API for DeploymentNode service.
// All implementations must embed UnimplementedDeploymentNodeServer
// for forward compatibility.
type DeploymentNodeServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	DeployApp(context.Context, *DeployAppRequest) (*DeployAppResponse, error)
	mustEmbedUnimplementedDeploymentNodeServer()
}

// UnimplementedDeploymentNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeploymentNodeServer struct{}

func (UnimplementedDeploymentNodeServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDeploymentNodeServer) DeployApp(context.Context, *DeployAppRequest) (*DeployAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployApp not implemented")
}
func (UnimplementedDeploymentNodeServer) mustEmbedUnimplementedDeploymentNodeServer() {}
func (UnimplementedDeploymentNodeServer) testEmbeddedByValue()                        {}

// UnsafeDeploymentNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentNodeServer will
// result in compilation errors.
type UnsafeDeploymentNodeServer interface {
	mustEmbedUnimplementedDeploymentNodeServer()
}

func RegisterDeploymentNodeServer(s grpc.ServiceRegistrar, srv DeploymentNodeServer) {
	// If the following call pancis, it indicates UnimplementedDeploymentNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeploymentNode_ServiceDesc, srv)
}

func _DeploymentNode_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentNodeServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentNode_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentNodeServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentNode_DeployApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentNodeServer).DeployApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentNode_DeployApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentNodeServer).DeployApp(ctx, req.(*DeployAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentNode_ServiceDesc is the grpc.ServiceDesc for DeploymentNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeploymentNode",
	HandlerType: (*DeploymentNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _DeploymentNode_HealthCheck_Handler,
		},
		{
			MethodName: "DeployApp",
			Handler:    _DeploymentNode_DeployApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/deployment_node.proto",
}
